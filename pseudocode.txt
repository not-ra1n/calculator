// thinking behind button.addEventListener

when you click a button, 
    put the buttons content into the input content
    store value of input into a variable (valueOne)
if button.textContent == "+" 
    let operator = "+"
        whatever the next number is
        put that as the new input.textContent
        store value of input into variable (valueTwo)

if (button.textContent == "=")
    return operate(valueOne, operator, valueTwo)

// thinking continued

you can tell that the first number is done, when
they type in an operator such as '+'.

how do you get it to stop putting numbers in that
array when an operator is put in?

whatever number they put in after the '+' is the
second value

// "equals sign" thinking of the logic

when you press equals
    slice the numbers that are before the operator
    out of the array and put it in a num1 variable
second
    log the operator as the operator
third 
    slice the number that are after the operator
    out of the array and put it in a num2 variable




// thoughts?

while (button.textContent != "+") {
    valuesOne.push(button.textContent);
    input.textContent = valuesOne;
}


// potential code

buttons.forEach((button) => {

    button.addEventListener('click', () => {
        
            valuesOne.push(button.textContent);
            console.log(valuesOne);
            input.textContent = valuesOne;
        

        if (button.textContent == "+") {
            operator = "+"
            console.log(operator)
            input.textContent = "+"
        }
    });
});



const chicken = valuesOne.reduce((a, 
e, i) => {
    if (e === "+")
    a.push(i);
    return a;
}, []);
console.log(chicken);

if (turkey == undefined) {
    turkey = 1;
}

const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+")
                a.push(i);
                return a;
            }, []);
            console.log(chicken);
            let turkey = (chicken[chicken.length-2]);
            
            console.log(turkey);












// thoughts about implementing different operators

when you click a number, than an operator, than
another number, than another operator,
    you should calculate the previous answer (result)
    then use that answer(result) as number 1 and use
    the next operator for whatever comes after
    it & num2

however how do you get the computer to get the
index of the second operator if the operator
symbol has been used twice? // we use lastIndexOf i think

//some problems in the code

1. when you click the '=' sign multiple times, it
does whatever 'operator' and #'s you assigned it
multiple times, and gets different numbers every times
instead of keeping the same answer.


// thoughts 

what you want to happen when it comes to the
operator thing with the pluses

when you click a plus sign after multiple plus
signs have been clicked
    you want to get the second to last plus sign
    calculate num2 via starting from but not including
    the second to last plus sign and up until the
    last plus sign but not including it


// thoughts for adding after the equals sign 
has already been hit

if you press 1 + 3 and then the equals button
    you get four
however when you press another addition button
after it, 
    you get NAN

when you click the plus button again
    get the previous result, don't worry about
    the equals sign and add it on whatever number
    comes next 


when you click an operator (such as '+')
after the equals sign has already been hit,
    get the result of the equals sign -
    put it in a variable? (maybe num1)
    don't worry about the equals sign
    and whatever comes after the last operator
    you put in, in num2 / besides whatever operator
    you click next such as '+' or '='

addition.addEventListener('click', () => {
    const last = valuesOne[valuesOne.length - 2];
    console.log(last);
    if (last === '=') {
        num1 = result;
        valuesOne.splice(last, 1)
        let num2 = 0


        buttons.forEach((button) => {
            button.addEventListener('click', () =>{
                valuesTwo.push(button.textContent);
                console.log(valuesTwo);
                input.textContent = valuesTwo;
            });
        });
        equal.addEventListener('click', () => {
            console.log(valuesTwo);
            indexOfOperator = valuesOne.lastIndexOf(operator) // you would have this already declared but we're adding it again just for readability sake
            indexOfEquals = valuesOne.indexOf('=');
            nextIndex = indexOfOperator + 1
            num2 = valuesTwo.slice(0, indexOfEquals)
            num2 = num2.join("");
            Number(num2);
            console.log(num2);
            console.log(operator);
            console.log(operate);
            result = operate(num1, operator, num2)
            console.log(result);
            input.textContent = result;
        });
    }
});\

// thoughts behind pressing the equals sign before
any numbers

so if you press equals sign before pressing any
numbers or an operator

let it equal 0

/// continued

if you press an equals sign after an equals sign
has already been pressed
    delete the equals sign
        and return result again

lastElement = valuesOne[valuesOne.length -1];
secondLastElement = valuesOne[valuesOne.length -2];
if (lastElement === "=" && secondLastElement === "=") {
    valuesOne.pop();
    console.log(result);
    input.textContent = result;
}

/// continued

if last element is equals sign 
&& operator === undefined {
    than just result the result
}

if (lastElement === "=" && operator === undefined) {
    input.textContent = num1;
}

// thoughts behind pressing a "+" after a "+" sign
has already been hit

lastElement = valuesOne[valuesOne.length -1];
    secondLastElement = valuesOne[valuesOne.length -2];
    if (lastElement === "+" && secondLastElement === "+") {
        valuesOne.pop();
        console.log(valuesOne);
        console.log(result);
        input.textContent = result;
    }

// errors to fix (1/21/24)

you might need to fix the amount of numbers you could input
so that it doesn't overflow the calculator screen



then add some design and make it look good!



/ ideas behind fixing overflow

if there are more than 8 numbers before an operator is pressed,
    delete the last number

if (valuesOne[valuesOne.length - 1] != operator
|| valuesOne[valuesOne.length -1 != "="]) {
    if (valuesOne.length > 8) {
        valuesOne.pop();
    }
    if (valuesOne.length > 8) {
        valuesOne.pop();
    }
}

if (result === undefined) {
    if (valuesOne[valuesOne.length - 1] != operator) {
        if (valuesOne.length > 8) {
            valuesOne.pop();
        }
    }
    if (valuesTwo[valuesTwo.length - 1] != operator) {
        if (valuesTwo.length > 8) {
            valuesTwo.pop();
        }
    }
} else {
    let resultArray = String(result).split("").map((result) => {
        return Number(result)  
    })
    if (resultArray.length > 8) {
        resultArray.pop();
        result = resultArray
    }
}



var length = (number + '').replace('.', '').length;  // for floats

function getlength(number) {
    number = valuesOne.length
    return number.toString().length;
}


/ logic for num2 fix?

when result is defined, the first operator should also be defined
    the numbers between the first operator and the last operator/equals sign
    would be num2
    if the num2.length is greater than 8 than
        pop the last number out




const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
            console.log(chicken);
            console.log(chicken.length);

when operator is clicked (operator is defined) 
    num2 === numbers between first operator clicked and last operator clicked'
    
        if (num2.length > 8) {
            num2.pop()
        } 

if (operator != undefined) {
    const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
            console.log(chicken);
            console.log(chicken.length);

            let turkey = (chicken[chicken.length-2]);
            console.log(turkey);       
            
            let water = valuesOne[turkey];
            console.log(water);
}

/ to logic from lines 343 to 402 makes sense in a way, and keep up the good work
/ but the code doesn't work just yet cause I think lastOperatorIndex isn't defined yet

/ i think you might have to look into the logic where if chicken.length increases or like if there is another operator


if (operator !== undefined) {
    lastOperator = valuesOne[valuesOne.length -1];
    lastOperatorTwo = valuesTwo[valuesTwo.length -1];
    if (operator !== lastOperator || "=" !== lastOperator) {

        const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
        console.log(chicken);

        if (chicken.length < 2) [
            secondToLastOperator = chicken[0];
            lastOperatorIndex = chicken[1];
        ] else {
        secondToLastOperator = chicken[chicken.length - 2]

        lastOperatorIndex = chicken[chicken.length -1]
        }

        updatedSecond = secondToLastOperator + 1
        num2 = valuesOne.slice(updatedSecond, lastOperatorIndex);
        
        if (num2.toString().length > 8) {
            num2 = Array.from(num2);
            num2.pop
            num2 = num2.toString();
        }
    } else {

    }
    if (operator !== lastOperatorTwo || "=" !== lastOperatorTwo) {

        const chicken2 = valuesTwo.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
        console.log(chicken2);

        if (chicken2.length < 2) [
            secondLastOperator2 = chicken2[0];
            lastOperatorIndex2 = chicken2[1];
        ] else {
        secondLastOperator2 = chicken2[chicken2.length - 2]

        lastOperatorIndex2 = chicken2[chicken2.length -1]
        }

        updatedSecond2 = secondLastOperator2 + 1
        num2 = valuesTwo.slice(updatedSecond2, lastOperatorIndex2);
        
        if (num2.toString().length > 8) {
            num2 = Array.from(num2);
            num2.pop
            num2 = num2.toString();
        }
    }
}

you could potentially solve this via two ways
1. you check if chicken.length increases or if there is an equals sign at the end
2. you check the valuesOne/valuesTwo arrays and see what their last values are


/ potentially fixing these lines of code

if (operator !== undefined) {

        const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
        console.log(chicken);
        console.log(chicken.length)


first store the length of chicken 1 in a variable to calculate how many operators have been clicked
    then whatever numbers are between the last operator that has been clicked and then a new operator
    that has been clicked
        store that as num2 and display those numbers
        if (num2 is greater than 7) {
            delete the last the number of num2
        }



newChickenLength = chicken.length
oldChickenLength = newChickenLength
if (newChickenLength != oldChickenLength) {
    alert ("hello");
}


/ potential fix

let secondLastElementChicken = chicken[chicken.length - 2];
let lastElementChicken = chicken[chicken.length - 1];


/ thoughts behind error 2/7/24

click numbers for num1
    then click an operator
the numbers that are clicked after that operator and before the next "=" or operator is clicked, 
    is num2
if those numbers are greater than 8
    delete the last number

you might just have to do it off of the first operator

the numbers that are pressed after the last operator are num2
    if those numbers are greater than 8, before another operator or equals sign has been hit,
        delete the last number  

// what you need to do 2/7/24

you need to check if an operator is clicked, 
2. see how many numbers are ckicked after the last operator
3. if those numbers are greater than 8, delete the last number
4. however if a new operator or equals sign has been clicked, before num2 reaches numbers, don't worry about it


addition.addEventListener('click', () => {
    console.log("i have been clicked");
    const chicken = valuesOne.reduce((a, e, i) => {
                            if (e === "+" || e === "-"
                            || e === "*" || e === "/")
                            a.push(i);
                            return a;
                        }, []);
                    console.log(chicken);
                    console.log(chicken.length);
                    newChickenLength = chicken.length
                    value = newChickenLength
                    console.log(value);
    function check1(oldValue) {
                        undefined === oldValue && (oldValue = value);
                        clearCheck = setInterval(repeatCheck,500,oldValue);
                        secondLastElementChicken = chicken[chicken.length - 2];
                        lastElementChicken = chicken[chicken.length - 1];
                        function repeatCheck(oldValue) {
                            if (value !== oldValue) {
                                // do something
                                clearInterval(clearCheck);
                                console.log("I have changed")
                            }
                        }
}
});


you may want to check if the last operator of the
chicken array changes, then check what are the numbers/
indexes of numbers between the the new last operator/equals
sign and previous last operator/equals sign 


how many numbers were clicked after the an operator has been clicked?

valuesOne.length
endOfChicken index

valuesOneLastIndex = valuesOne[endOfChicken];

console.log(valuesOneLastIndex)

lengthOfNum2 = valuesOne.length - endOfChicken - 1
console.log(lengthOfNum2);


function check2(oldValue) {
                        undefined === oldValue && (oldValue = endOfChicken);
                        clearCheck = setInterval(repeatCheck,500,oldValue);
                        secondLastElementChicken = chicken[chicken.length - 2];
                        lastElementChicken = chicken[chicken.length - 1];
                        function repeatCheck(oldValue) {
                            if (endOfChicken === oldValue) {
                                // do something
                                if (lengthOfNum2 > 8) {
                                    clearInterval(clearCheck);
                                        valuesOne.pop
                                        console.log(valuesOne)
                                    }
                                }
                            }
                        }
}

if endOfChicken does not change {
    if (lengthOfNum2 > 8) {
        valuesOne.pop
        console.log(valuesOne)
    }
}







you may want to define the index of the operator, then check
    how many more indexes appeared after it



/ was able to add the watch thing to the code, just have to fix it a little bit

function check1(oldValue) {
    undefined === oldValue && (oldValue = value);
    clearCheck = setInterval(repeatCheck,500,oldValue);
    function repeatCheck(oldValue) {
        if (value !== oldValue) {
            // do something
            clearInterval(clearCheck);
            console.log("hello");
        }
    }
}

check1();

/ what do you want to happen with the code above? 2/2/2024

what I want to happen is that when user clicks a number in the first place, than clicks an operator, the numbers between
the NEXT clicked operator or equals sign will be num2,
    if num2 is greater than 8, than we want to pop the last number




do you need to do something about the equals sign?
/



        if (chicken.length < 2) [
            secondToLastOperator = chicken[0];
            lastOperatorIndex = chicken[1];
        ] else {
        secondToLastOperator = chicken[chicken.length - 2]

        lastOperatorIndex = chicken[chicken.length -1]
        }

        updatedSecond = secondToLastOperator + 1
        num2 = valuesOne.slice(updatedSecond, lastOperatorIndex);
        
        if (num2.toString().length > 8) {
            num2 = Array.from(num2);
            num2.pop
            num2 = num2.toString();
        }
    } else {
        
    }
    if (operator !== lastOperatorTwo || "=" !== lastOperatorTwo) {

        const chicken2 = valuesTwo.reduce((a, e, i) => {
                if (e === "+" || e === "-"
                || e === "*" || e === "/")
                a.push(i);
                return a;
            }, []);
        console.log(chicken2);

        if (chicken2.length < 2) [
            secondLastOperator2 = chicken2[0];
            lastOperatorIndex2 = chicken2[1];
        ] else {
        secondLastOperator2 = chicken2[chicken2.length - 2]

        lastOperatorIndex2 = chicken2[chicken2.length -1]
        }

        updatedSecond2 = secondLastOperator2 + 1
        num2 = valuesTwo.slice(updatedSecond2, lastOperatorIndex2);
        
        if (num2.toString().length > 8) {
            num2 = Array.from(num2);
            num2.pop
            num2 = num2.toString();
        }
    }
}




// cool features to implement (1/23/24)

if you click an operator, have that operator selected until a number is clicked

// if another error appears with like something not being a number, remember that you removed Number() from return
// Number(result) from like all the resultArray things like for example from like 701 (1/23/24)
