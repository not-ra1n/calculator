// thinking behind button.addEventListener

when you click a button, 
    put the buttons content into the input content
    store value of input into a variable (valueOne)
if button.textContent == "+" 
    let operator = "+"
        whatever the next number is
        put that as the new input.textContent
        store value of input into variable (valueTwo)

if (button.textContent == "=")
    return operate(valueOne, operator, valueTwo)

// thinking continued

you can tell that the first number is done, when
they type in an operator such as '+'.

how do you get it to stop putting numbers in that
array when an operator is put in?

whatever number they put in after the '+' is the
second value

// "equals sign" thinking of the logic

when you press equals
    slice the numbers that are before the operator
    out of the array and put it in a num1 variable
second
    log the operator as the operator
third 
    slice the number that are after the operator
    out of the array and put it in a num2 variable




// thoughts?

while (button.textContent != "+") {
    valuesOne.push(button.textContent);
    input.textContent = valuesOne;
}


// potential code

buttons.forEach((button) => {

    button.addEventListener('click', () => {
        
            valuesOne.push(button.textContent);
            console.log(valuesOne);
            input.textContent = valuesOne;
        

        if (button.textContent == "+") {
            operator = "+"
            console.log(operator)
            input.textContent = "+"
        }
    });
});



const chicken = valuesOne.reduce((a, 
e, i) => {
    if (e === "+")
    a.push(i);
    return a;
}, []);
console.log(chicken);

if (turkey == undefined) {
    turkey = 1;
}

const chicken = valuesOne.reduce((a, e, i) => {
                if (e === "+")
                a.push(i);
                return a;
            }, []);
            console.log(chicken);
            let turkey = (chicken[chicken.length-2]);
            
            console.log(turkey);












// thoughts about implementing different operators

when you click a number, than an operator, than
another number, than another operator,
    you should calculate the previous answer (result)
    then use that answer(result) as number 1 and use
    the next operator for whatever comes after
    it & num2

however how do you get the computer to get the
index of the second operator if the operator
symbol has been used twice? // we use lastIndexOf i think

//some problems in the code

1. when you click the '=' sign multiple times, it
does whatever 'operator' and #'s you assigned it
multiple times, and gets different numbers every times
instead of keeping the same answer.


// thoughts 

what you want to happen when it comes to the
operator thing with the pluses

when you click a plus sign after multiple plus
signs have been clicked
    you want to get the second to last plus sign
    calculate num2 via starting from but not including
    the second to last plus sign and up until the
    last plus sign but not including it


// thoughts for adding after the equals sign 
has already been hit

if you press 1 + 3 and then the equals button
    you get four
however when you press another addition button
after it, 
    you get NAN

when you click the plus button again
    get the previous result, don't worry about
    the equals sign and add it on whatever number
    comes next 


when you click an operator (such as '+')
after the equals sign has already been hit,
    get the result of the equals sign -
    put it in a variable? (maybe num1)
    don't worry about the equals sign
    and whatever comes after the last operator
    you put in, in num2 / besides whatever operator
    you click next such as '+' or '='

addition.addEventListener('click', () => {
    const last = valuesOne[valuesOne.length - 2];
    console.log(last);
    if (last === '=') {
        num1 = result;
        valuesOne.splice(last, 1)
        let num2 = 0


        buttons.forEach((button) => {
            button.addEventListener('click', () =>{
                valuesTwo.push(button.textContent);
                console.log(valuesTwo);
                input.textContent = valuesTwo;
            });
        });
        equal.addEventListener('click', () => {
            console.log(valuesTwo);
            indexOfOperator = valuesOne.lastIndexOf(operator) // you would have this already declared but we're adding it again just for readability sake
            indexOfEquals = valuesOne.indexOf('=');
            nextIndex = indexOfOperator + 1
            num2 = valuesTwo.slice(0, indexOfEquals)
            num2 = num2.join("");
            Number(num2);
            console.log(num2);
            console.log(operator);
            console.log(operate);
            result = operate(num1, operator, num2)
            console.log(result);
            input.textContent = result;
        });
    }
});\

// thoughts behind pressing the equals sign before
any numbers

so if you press equals sign before pressing any
numbers or an operator

let it equal 0

/// continued

if you press an equals sign after an equals sign
has already been pressed
    delete the equals sign
        and return result again

lastElement = valuesOne[valuesOne.length -1];
secondLastElement = valuesOne[valuesOne.length -2];
if (lastElement === "=" && secondLastElement === "=") {
    valuesOne.pop();
    console.log(result);
    input.textContent = result;
}

/// continued

if last element is equals sign 
&& operator === undefined {
    than just result the result
}

if (lastElement === "=" && operator === undefined) {
    input.textContent = num1;
}

// thoughts behind pressing a "+" after a "+" sign
has already been hit

lastElement = valuesOne[valuesOne.length -1];
    secondLastElement = valuesOne[valuesOne.length -2];
    if (lastElement === "+" && secondLastElement === "+") {
        valuesOne.pop();
        console.log(valuesOne);
        console.log(result);
        input.textContent = result;
    } 